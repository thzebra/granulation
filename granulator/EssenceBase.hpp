#pragma once
#include "Grain.hpp"

namespace Granulation {
namespace Synthesis {

/**
 * @brief The EssenceBase class is the non-template base class for the template class Essence.
 *
 * The EssenceBase is used as a placeholder in non-template classes that use an
 * Essence, such as GranulatorBase.
 */

class EssenceBase
{
public:

    /**
     * @brief Default constructor that does nothing.
     */

    EssenceBase();
    virtual ~EssenceBase() = default;

    /**
     * @brief Makes a Grain.
     * @return A new Grain.
     */

    virtual Grain makeGrain() = 0;

    /**
     * @brief Gets the number of channels of grains generated by this essence.
     * @return The number of channels of the essence.
     */

    virtual int channels() const = 0;

    /**
     * @brief Get the sample rate of grains generated by this essence.
     * @return The sample rate of the essence.
     */

    virtual int sampleRate() const = 0;

    /**
     * @brief Gets the length of grains generated by this essence.
     * @return The number of framesa grain generated by this essence will have.
     */

    virtual int length() const = 0;

    /**
     * @brief Gets the duration of grains generated by this essence.
     * @return A duration in milliseconds.
     */

    virtual int grainDuration() const = 0;

    /**
     * @brief Gets the pointer to the SourceData used in the essence.
     * @return A shared_ptr to a SourceData.
     */

    virtual std::shared_ptr<SourceData> rawData() const = 0;

    /**
     * @brief Sets the duration of grains generatedby this essence.
     * @param duration: A duration in milliseconds.
     */

    virtual void setDuration(int duration) = 0;

    /**
     * @brief Sets the first sample of generated grains' source window.
     * @param firstSample: An integer representing the frame that should be the
     * first one used in the sample source.
     */

    virtual void setBegin(int firstSample) = 0;
};

}
}
